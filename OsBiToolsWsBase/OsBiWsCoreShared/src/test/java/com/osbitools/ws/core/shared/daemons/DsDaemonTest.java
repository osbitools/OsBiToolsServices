/*
 * Open Source Business Intelligence Tools - http://www.osbitools.com/
 * 
 * Copyright 2014-2018 IvaLab Inc. and by respective contributors (see below).
 * 
 * Released under the LGPL v3 or higher
 * See http://www.gnu.org/licenses/lgpl-3.0.html
 *
 * Date: 2014-11-07
 * 
 * Contributors:
 * 
 */

package com.osbitools.ws.core.shared.daemons;

import static org.junit.Assert.*;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CountDownLatch;

import javax.sql.DataSource;

import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.test.autoconfigure.jdbc.JdbcTest;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit4.SpringRunner;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.osbitools.ws.base.WsSrvException;
import com.osbitools.ws.core.shared.TestCoreSharedAppConfig;
import com.osbitools.ws.core.shared.bindings.BindingTest;
import com.osbitools.ws.core.shared.common.CoreSharedTestConstants;
import com.osbitools.ws.core.shared.config.CoreWsConfig;
import com.osbitools.ws.core.shared.daemons.AbstractResourceCheck;
import com.osbitools.ws.core.shared.daemons.DsDescrResource;
import com.osbitools.ws.core.shared.daemons.DsExtResource;
import com.osbitools.ws.core.shared.daemons.LsFilesCheck;
import com.osbitools.ws.core.shared.daemons.LsResource;
import com.osbitools.ws.core.shared.model.DataSet;
import com.osbitools.ws.core.shared.model.TraceRecorder;
import com.osbitools.ws.core.shared.proc.*;
import com.osbitools.ws.core.shared.producers.StaticDataSetProducer;
import com.osbitools.ws.shared.service.RequestLogger;
import com.osbitools.ws.shared.service.impl.RequestLoggerImpl;
import com.osbitools.ws.shared.service.impl.AnonymousUserServiceImpl;
import com.osbitools.ws.shared.*;
import com.osbitools.ws.shared.common.CommonConstants;
import com.osbitools.ws.shared.common.JarTestResourceUtils;
import com.osbitools.ws.shared.common.JarUtils;
import com.osbitools.ws.shared.common.TestConstants;
import com.osbitools.ws.shared.binding.ds.DataSetDescr;

@DirtiesContext
@RunWith(SpringRunner.class)
@JdbcTest
@TestPropertySource("classpath:test.properties")
@ContextConfiguration(classes = { TestCoreSharedAppConfig.class,
    LsFilesCheck.class, DsFilesCheck.class })
public class DsDaemonTest
    extends AbstractResourceDaemonTest<DataSetDescr, DsDescrResource> {

  @Autowired
  private DataSource _ds;

  // Pointer on Web Service configuration
  @Autowired
  @Qualifier("core_ws_cfg")
  private CoreWsConfig _cfg;

  //Pointer on DsFilesCheck daemon
  @Autowired
  @Qualifier("dcheck")
  public void setDsFilesCheckRef(
      AbstractResourceCheck<DataSetDescr, DsDescrResource> check) {
    initCheckRef(check);
  }

  private RequestLogger _rlog;

  @Autowired
  @Qualifier("log")
  private void setLogger(Logger log) {
    _rlog = new RequestLoggerImpl();
    _rlog.setLogger(log);
    ((RequestLoggerImpl) _rlog).setLoginUser(new AnonymousUserServiceImpl());
  }

  // Destination file
  private static final String _fname =
      CoreSharedTestConstants.WORK_DS_PATH + TestDsConstants.DS_DEMO_FNAME;

  // Test File alias
  static final String DBMAP_ALIAS = TestDsConstants.DS_DEMO_FNAME;

  static CountDownLatch ss1 = new CountDownLatch(1);
  static CountDownLatch ss2 = new CountDownLatch(1);
  static CountDownLatch ss3 = new CountDownLatch(1);
  static CountDownLatch ds1 = new CountDownLatch(TestConstants.THREAD_NUM);
  static CountDownLatch ds2 = new CountDownLatch(TestConstants.THREAD_NUM);
  static CountDownLatch ds3 = new CountDownLatch(TestConstants.THREAD_NUM);

  // Number of errors
  static int ecnt = 0;

  TraceRecorder trace;

  ArrayList<String> warn;

  private static DsMapTestResConfig _ds_cfg = new DsMapTestResConfig();

  // @formatter:off
   
  public static final String STR_STATIC_TEST_LMAP_SINGLE =
      "{\"columns\":[" +
          "{\"name\":\"COL1\",\"java_type\":\"java.lang.String\"}]," +
          "\"data\":[[\"Username\"]," + "[\"Password\"]" +
      "]}";

  public static final String STR_STATIC_TEST_LMAP_MULTI =
      "{\"columns\":[" +
          "{\"name\":\"COL1\",\"java_type\":\"java.lang.String\"}]," +
          "\"data\":[" +
            "[\"Username\"],[\"Password\"],[\"Username\"]," +
            "[\"Password\"],[\"Username\"],[\"Password\"]" +
      "]}";

  public static final String STR_STATIC_TEST_LMAP_GRP_COMPLEX_1 =
      "{\"columns\":[" +
          "{\"name\":\"COL1\",\"java_type\":\"java.lang.String\"}," +
          "{\"name\":\"CNT\",\"java_type\":\"java.lang.Integer\"}]," +
      "\"data\":[" +
          "[\"Password\",1],[\"Password\",3],[\"Password\",5]," +
          "[\"Username\",0],[\"Username\",2],[\"Username\",4]" +
      "]}";

  public static final String STR_STATIC_TEST_LMAP_GRP_COMPLEX_2 =
      "{\"columns\":[" +
            "{\"name\":\"COL1\",\"java_type\":\"java.lang.String\"}," +
            "{\"name\":\"CNT\",\"java_type\":\"java.lang.Integer\"}]," +
        "\"data\":[" +
          "[\"Password\",1],[\"Password\",3],[\"Password\",5]," +
          "[\"Username\",0],[\"Username\",2],[\"Username\",4]" +
      "]}";

  public static final String STR_STATIC_TEST_LMAP_GRP_COMPLEX_3 =
      "{\"columns\":[{" +
          "\"name\":\"COL1\"," + "\"java_type\":\"java.lang.String\"}]," +
       "\"data\":[" +
          "[\"Password\"],[\"Password\"],[\"Password\"]," +
          "[\"Username\"],[\"Username\"],[\"Username\"]" +
      "]}";

  public static final String STR_STATIC_TEST_GROUP_MIXED = 
      "{\"columns\":[" +
          "{\"name\":\"CSTR\",\"java_type\":\"java.lang.String\"}," +
          "{\"name\":\"CNUM\",\"java_type\":\"java.lang.String\"}]," +
      "\"data\":[" +
        "[\"wnA\",\"2\"]," +
        "[\"вжщ\",\"5\"],[\"gbJ\",\"4\"],[\"ГДц\",\"5\"],[\"bnW\",\"5\"]," +
        "[\"ГБЧ\",\"2\"],[\"ruT\",\"7\"],[\"eTo\",\"4\"],[\"jqq\",\"5\"]," +
        "[\"rMn\",\"9\"],[\"кРВ\",\"7\"],[\"tOD\",\"8\"],[\"ФЦЭ\",\"7\"]," +
        "[\"wiZ\",\"0\"],[\"orZ\",\"2\"],[\"nuU\",\"9\"],[\"Glu\",\"4\"]," +
        "[\"QRH\",\"0\"],[\"aeL\",\"8\"],[\"УдЭ\",\"8\"],[\"ЕюР\",\"4\"]," +
        "[\"вжм\",\"4\"],[\"ЛОЖ\",\"4\"],[\"рзг\",\"0\"],[\"ЯБр\",\"3\"]," +
        "[\"пТФ\",\"2\"],[\"ФцР\",\"7\"],[\"щЕХ\",\"9\"],[\"duS\",\"3\"]," +
        "[\"hhg\",\"3\"],[\"щмф\",\"3\"],[\"XGh\",\"4\"],[\"Ншу\",\"6\"]," +
        "[\"РЕЩ\",\"4\"],[\"ДЮЗ\",\"5\"],[\"ЦвР\",\"8\"],[\"DOn\",\"1\"]," +
        "[\"khU\",\"3\"],[\"Esp\",\"4\"],[\"iyO\",\"3\"],[\"рЭБ\",\"4\"]," +
        "[\"ЛрЗ\",\"2\"],[\"бсБ\",\"5\"],[\"зМг\",\"1\"],[\"ucq\",\"4\"]," +
        "[\"RFV\",\"8\"],[\"яэд\",\"1\"],[\"ExL\",\"5\"],[\"юяЧ\",\"4\"]," +
        "[\"СГж\",\"1\"],[\"хЧН\",\"6\"],[\"ЯГЮ\",\"6\"],[\"fcA\",\"3\"]," +
        "[\"гРЛ\",\"5\"],[\"psx\",\"8\"],[\"yDl\",\"6\"],[\"PTM\",\"2\"]," +
        "[\"pyQ\",\"8\"],[\"цБТ\",\"1\"],[\"KZq\",\"4\"],[\"QhO\",\"2\"]," +
        "[\"ЗЛЛ\",\"7\"],[\"JKn\",\"3\"],[\"Fkp\",\"1\"],[\"ПщЯ\",\"2\"]," +
        "[\"DSr\",\"3\"],[\"тРМ\",\"2\"],[\"zfT\",\"2\"],[\"ЖлЦ\",\"7\"]," +
        "[\"YNh\",\"5\"],[\"jaL\",\"5\"],[\"BEC\",\"6\"],[\"jgB\",\"9\"]," +
        "[\"vyH\",\"6\"],[\"LbP\",\"9\"],[\"мбм\",\"3\"],[\"уЛН\",\"7\"]," +
        "[\"УчЮ\",\"2\"],[\"cho\",\"7\"],[\"vYB\",\"9\"],[\"гДд\",\"4\"]," +
        "[\"ВеГ\",\"8\"],[\"PIu\",\"2\"],[\"nTx\",\"9\"],[\"pwE\",\"4\"]," +
        "[\"пбщ\",\"0\"],[\"дЯШ\",\"1\"],[\"UGG\",\"5\"],[\"ЩЛщ\",\"7\"]," +
        "[\"рДю\",\"1\"],[\"ждЮ\",\"7\"],[\"яЧН\",\"2\"],[\"ХЩК\",\"4\"]," +
        "[\"Улд\",\"4\"],[\"щэЮ\",\"4\"],[\"цЯМ\",\"9\"],[\"cgT\",\"8\"]," +
        "[\"WwK\",\"1\"],[\"ЖРГ\",\"8\"],[\"QXR\",\"5\"],[\"_UUu\",\"222\"]," +
        "[\"_dDd\",\"333\"],[\"wnA\",\"2\"],[\"вжщ\",\"5\"],[\"gbJ\",\"4\"]," +
        "[\"ГДц\",\"5\"],[\"bnW\",\"5\"],[\"ГБЧ\",\"2\"],[\"ruT\",\"7\"]," +
        "[\"eTo\",\"4\"],[\"jqq\",\"5\"],[\"rMn\",\"9\"],[\"кРВ\",\"7\"]," +
        "[\"tOD\",\"8\"],[\"ФЦЭ\",\"7\"],[\"wiZ\",\"0\"],[\"orZ\",\"2\"]," +
        "[\"nuU\",\"9\"],[\"Glu\",\"4\"],[\"QRH\",\"0\"],[\"aeL\",\"8\"]," +
        "[\"УдЭ\",\"8\"],[\"ЕюР\",\"4\"],[\"вжм\",\"4\"],[\"ЛОЖ\",\"4\"]," +
        "[\"рзг\",\"0\"],[\"ЯБр\",\"3\"],[\"пТФ\",\"2\"],[\"ФцР\",\"7\"]," +
        "[\"щЕХ\",\"9\"],[\"duS\",\"3\"],[\"hhg\",\"3\"],[\"щмф\",\"3\"]," +
        "[\"XGh\",\"4\"],[\"Ншу\",\"6\"],[\"РЕЩ\",\"4\"],[\"ДЮЗ\",\"5\"]," +
        "[\"ЦвР\",\"8\"],[\"DOn\",\"1\"],[\"khU\",\"3\"],[\"Esp\",\"4\"]," +
        "[\"iyO\",\"3\"],[\"рЭБ\",\"4\"],[\"ЛрЗ\",\"2\"],[\"бсБ\",\"5\"]," +
        "[\"зМг\",\"1\"],[\"ucq\",\"4\"],[\"RFV\",\"8\"],[\"яэд\",\"1\"]," +
        "[\"ExL\",\"5\"],[\"юяЧ\",\"4\"],[\"СГж\",\"1\"],[\"хЧН\",\"6\"]," +
        "[\"ЯГЮ\",\"6\"],[\"fcA\",\"3\"],[\"гРЛ\",\"5\"],[\"psx\",\"8\"]," +
        "[\"yDl\",\"6\"],[\"PTM\",\"2\"],[\"pyQ\",\"8\"],[\"цБТ\",\"1\"]," +
        "[\"KZq\",\"4\"],[\"QhO\",\"2\"],[\"ЗЛЛ\",\"7\"],[\"JKn\",\"3\"]," +
        "[\"Fkp\",\"1\"],[\"ПщЯ\",\"2\"],[\"DSr\",\"3\"],[\"тРМ\",\"2\"]," +
        "[\"zfT\",\"2\"],[\"ЖлЦ\",\"7\"],[\"YNh\",\"5\"],[\"jaL\",\"5\"]," +
        "[\"BEC\",\"6\"],[\"jgB\",\"9\"],[\"vyH\",\"6\"],[\"LbP\",\"9\"]," +
        "[\"мбм\",\"3\"],[\"уЛН\",\"7\"],[\"УчЮ\",\"2\"],[\"cho\",\"7\"]," +
        "[\"vYB\",\"9\"],[\"гДд\",\"4\"],[\"ВеГ\",\"8\"],[\"PIu\",\"2\"]," +
        "[\"nTx\",\"9\"],[\"pwE\",\"4\"],[\"пбщ\",\"0\"],[\"дЯШ\",\"1\"]," +
        "[\"UGG\",\"5\"],[\"ЩЛщ\",\"7\"],[\"рДю\",\"1\"],[\"ждЮ\",\"7\"]," +
        "[\"яЧН\",\"2\"],[\"ХЩК\",\"4\"],[\"Улд\",\"4\"],[\"щэЮ\",\"4\"]," +
        "[\"цЯМ\",\"9\"],[\"cgT\",\"8\"],[\"WwK\",\"1\"],[\"ЖРГ\",\"8\"]," +
        "[\"QXR\",\"5\"]]}";

  public static final String STR_STATIC_TEST_LMAP_AUTO_INC =
      "{\"columns\":[" + "{\"name\":\"COL1\",\"java_type\":\"java.lang.String\"}," +
          "{\"name\":\"COL2\",\"java_type\":\"java.lang.Integer\"}," +
          "{\"name\":\"COL3\",\"java_type\":\"java.lang.Integer\"}]," +
       "\"data\":[[\"Username\",-5,0],[\"Password\",0,1]]}";

  public static final String STR_STATIC_TEST_LMAP_CALC =
      "{\"columns\":[" + "{\"name\":\"COL1\",\"java_type\":\"java.lang.String\"}," +
          "{\"name\":\"COL2\",\"java_type\":\"java.lang.Integer\"}," +
          "{\"name\":\"COL3\",\"java_type\":\"java.lang.Integer\"}," +
          "{\"name\":\"COL4\",\"java_type\":\"java.lang.Integer\"}," +
          "{\"name\":\"COL5\",\"java_type\":\"java.lang.Integer\"}," +
          "{\"name\":\"COL6\",\"java_type\":\"java.lang.Integer\"}," +
          "{\"name\":\"COL7\",\"java_type\":\"java.lang.Double\"}," +
          "{\"name\":\"COL8\",\"java_type\":\"java.lang.String\"}]," +
       "\"data\":[[\"Username\",-5,0,-5,-15,-100,-5.0,\"Username Username 25\"]," +
          "[\"Password\",0,1,1,2,0,0.0,\"Password Password 0\"]," +
          "[\"Let's go\",5,2,7,31,2,1.6666666666666667,\"Let's go Let's go 25\"]]}";

  public static final String STR_STATIC_TEST_CALC_DATE1 = 
      "{\"columns\":[" +
        "{\"name\":\"COL1\",\"java_type\":\"java.lang.Integer\"}," +
        "{\"name\":\"COL2\",\"java_type\":\"java.lang.Integer\"}," +
        "{\"name\":\"COL3\",\"java_type\":\"java.lang.Integer\"}," +
        "{\"name\":\"COL4\",\"java_type\":\"java.lang.Long\"}," +
        "{\"name\":\"COL5\",\"java_type\":\"java.lang.String\"}]," +
      "\"data\":[" +
        "[1,9,1995,789627600000,\"1/9/1995\"]," +
        "[2,11,1996,824014800000,\"2/11/1996\"]," +
        "[3,13,1997,858229200000,\"3/13/1997\"]," +
        "[4,15,1998,892612800000,\"4/15/1998\"]," +
        "[5,17,1999,926913600000,\"5/17/1999\"]," +
        "[6,19,2000,961387200000,\"6/19/2000\"]," +
        "[7,21,2001,995688000000,\"7/21/2001\"]," +
        "[8,23,2002,1030075200000,\"8/23/2002\"]," +
        "[9,25,2003,1064462400000,\"9/25/2003\"]," +
        "[10,27,2004,1098849600000,\"10/27/2004\"]," +
        "[11,29,2005,1133240400000,\"11/29/2005\"]," +
        "[12,31,2006,1167541200000,\"12/31/2006\"]" +
      "]}";

  public static final String STR_STATIC_TEST_CALC_DATE2 = "{" +
      "\"columns\":[" +
        "{\"name\":\"COL1\",\"java_type\":\"com.osbitools.util.Date\"}," +
        "{\"name\":\"COL2\",\"java_type\":\"java.lang.String\"}]," +
      "\"data\":[" +
        "[\"2000-12-31\"," +
        "\"[978220800000]\"]" +
  "]}";
  
  static final String STR_STATIC_TEST_LMAP_NON_MINIFIED_NO_TRACE =
      "{\n" + "  \"columns\" : [ {\n" + "    \"name\" : \"COL1\",\n" +
          "    \"java_type\" : \"java.lang.String\"\n" + "  } ],\n" +
          "  \"data\" : [ [ \"Username\" ], [ \"Password\" ] ]\n" + "}";

  static final String STR_STATIC_TEST_LMAP_NON_MINIFIED =
      "{\n" + "  \"columns\" : [ {\n" + "    \"name\" : \"COL1\",\n" +
          "    \"java_type\" : \"java.lang.String\"\n" + "  } ],\n" +
          "  \"data\" : [ [ \"Username\" ], [ \"Password\" ] ],\n" + "  \"trace\" : [ {\n" +
          "    \"key\" : \"Start processing\",\n" + "    \"duration\": \n" + "  }, {\n" +
          "    \"key\" : \"DataSet Proc Start\",\n" + "    \"duration\": \n" + "  }, {\n" +
          "    \"key\" : \"DataSet Data Read\",\n" + "    \"duration\": \n" + "  }, {\n" +
          "    \"key\" : \"Data Read\",\n" + "    \"duration\": \n" + "  }, {\n" +
          "    \"key\" : \"End processing\",\n" + "    \"duration\": \n" + "  } ],\n" +
          "  \"warn\" : [ \"Hi \\\"there\\\"!!!\", \"Hello 'here'???\" ]\n" + "}";

  static final String STR_STATIC_TEST_LMAP_GRP_NON_MINIFIED =
      "{\n" + "  \"columns\" : [ {\n" + "    \"name\" : \"COL1\",\n" +
          "    \"java_type\" : \"java.lang.String\"\n" + "  } ],\n" +
          "  \"data\" : [ [ \"Username\" ], [ \"Password\" ] ],\n" + "  \"trace\" : [ {\n" +
          "    \"key\" : \"Start processing\",\n" + "    \"duration\": \n" + "  }, {\n" +
          "    \"key\" : \"DataSet Proc Start\",\n" + "    \"duration\": \n" + "  }, {\n" +
          "    \"key\" : \"DataSet Proc Start\",\n" + "    \"duration\": \n" + "  }, {\n" +
          "    \"key\" : \"DataSet Data Read\",\n" + "    \"duration\": \n" + "  }, {\n" +
          "    \"key\" : \"DataSet Data Read\",\n" + "    \"duration\": \n" + "  }, {\n" +
          "    \"key\" : \"Data Read\",\n" + "    \"duration\": \n" + "  }, {\n" +
          "    \"key\" : \"End processing\",\n" + "    \"duration\": \n" + "  } ],\n" +
          "  \"warn\" : [ \"Hi \\\"there\\\"!!!\", \"Hello 'here'???\" ]\n" + "}";

  static final String STR_STATIC_TEST_LMAP_EX_NON_MINIFIED = "{\n" + "  \"columns\" : [ {\n" +
      "    \"name\" : \"COL1\",\n" + "    \"java_type\" : \"java.lang.String\"\n" +
      "  } ],\n" + "  \"data\" : [ [ \"Username\" ], [ \"Password\" ], " +
      "[ \"Username\" ], [ \"Password\" ], " + "[ \"Username\" ], [ \"Password\" ] ]\n" + "}";

  static final String STR_STATIC_TEST_LMAP_COMPLEX_NON_MINIFIED =
      "{\n" + "  \"columns\" : [ {\n" + "    \"name\" : \"COL1\",\n" +
          "    \"java_type\" : \"java.lang.String\"\n" + "  } ],\n" +
          "  \"data\" : [ [ \"Password\" ], [ \"Password\" ], [ \"Password\" ], " +
          "[ \"Username\" ], [ \"Username\" ], [ \"Username\" ] ]\n" + "}";

  public static final String STR_STATIC_TEST_STR1 =
      "{" + "\"columns\":[" + "{\"name\":\"COL1\",\"java_type\":\"java.lang.String\"}," +
          "{\"name\":\"COL2\",\"java_type\":\"java.lang.String\"}," +
          "{\"name\":\"COL3\",\"java_type\":\"java.lang.String\"}]," +
          "\"data\":[[\"a1\",\"b1\",\"c1\"]," + "[\"A1\",\"B1\",\"C1\"]," +
          "[\"a2\",\"b2\",\"c2\"]," + "[\"A2\",\"B2\",\"C2\"]]}";

  public static final String STR_STATIC_TEST_STR_SORTED =
      "{" + "\"columns\":[" + "{\"name\":\"COL1\",\"java_type\":\"java.lang.String\"}," +
          "{\"name\":\"COL2\",\"java_type\":\"java.lang.String\"}," +
          "{\"name\":\"COL3\",\"java_type\":\"java.lang.String\"}]," +
          "\"data\":[[\"A1\",\"B1\",\"C1\"]," + "[\"A2\",\"B2\",\"C2\"]," +
          "[\"a1\",\"b1\",\"c1\"]," + "[\"a2\",\"b2\",\"c2\"]]}";

  public static final String CSV_STR1 = "{" + "\"columns\":[" +
      "{\"name\":\"CSTR\",\"java_type\":\"java.lang.String\"}," +
      "{\"name\":\"CNUM\",\"java_type\":\"java.lang.String\"}]," +
      "\"data\":[[\"wnA\",\"2\"],[\"вжщ\",\"5\"],[\"gbJ\",\"4\"]," +
      "[\"ГДц\",\"5\"],[\"bnW\",\"5\"],[\"ГБЧ\",\"2\"],[\"ruT\",\"7\"]," +
      "[\"eTo\",\"4\"],[\"jqq\",\"5\"],[\"rMn\",\"9\"],[\"кРВ\",\"7\"]," +
      "[\"tOD\",\"8\"],[\"ФЦЭ\",\"7\"],[\"wiZ\",\"0\"],[\"orZ\",\"2\"]," +
      "[\"nuU\",\"9\"],[\"Glu\",\"4\"],[\"QRH\",\"0\"],[\"aeL\",\"8\"]," +
      "[\"УдЭ\",\"8\"],[\"ЕюР\",\"4\"],[\"вжм\",\"4\"],[\"ЛОЖ\",\"4\"]," +
      "[\"рзг\",\"0\"],[\"ЯБр\",\"3\"],[\"пТФ\",\"2\"],[\"ФцР\",\"7\"]," +
      "[\"щЕХ\",\"9\"],[\"duS\",\"3\"],[\"hhg\",\"3\"],[\"щмф\",\"3\"]," +
      "[\"XGh\",\"4\"],[\"Ншу\",\"6\"],[\"РЕЩ\",\"4\"],[\"ДЮЗ\",\"5\"]," +
      "[\"ЦвР\",\"8\"],[\"DOn\",\"1\"],[\"khU\",\"3\"],[\"Esp\",\"4\"]," +
      "[\"iyO\",\"3\"],[\"рЭБ\",\"4\"],[\"ЛрЗ\",\"2\"],[\"бсБ\",\"5\"]," +
      "[\"зМг\",\"1\"],[\"ucq\",\"4\"],[\"RFV\",\"8\"],[\"яэд\",\"1\"]," +
      "[\"ExL\",\"5\"],[\"юяЧ\",\"4\"],[\"СГж\",\"1\"],[\"хЧН\",\"6\"]," +
      "[\"ЯГЮ\",\"6\"],[\"fcA\",\"3\"],[\"гРЛ\",\"5\"],[\"psx\",\"8\"]," +
      "[\"yDl\",\"6\"],[\"PTM\",\"2\"],[\"pyQ\",\"8\"],[\"цБТ\",\"1\"]," +
      "[\"KZq\",\"4\"],[\"QhO\",\"2\"],[\"ЗЛЛ\",\"7\"],[\"JKn\",\"3\"]," +
      "[\"Fkp\",\"1\"],[\"ПщЯ\",\"2\"],[\"DSr\",\"3\"],[\"тРМ\",\"2\"]," +
      "[\"zfT\",\"2\"],[\"ЖлЦ\",\"7\"],[\"YNh\",\"5\"],[\"jaL\",\"5\"]," +
      "[\"BEC\",\"6\"],[\"jgB\",\"9\"],[\"vyH\",\"6\"],[\"LbP\",\"9\"]," +
      "[\"мбм\",\"3\"],[\"уЛН\",\"7\"],[\"УчЮ\",\"2\"],[\"cho\",\"7\"]," +
      "[\"vYB\",\"9\"],[\"гДд\",\"4\"],[\"ВеГ\",\"8\"],[\"PIu\",\"2\"]," +
      "[\"nTx\",\"9\"],[\"pwE\",\"4\"],[\"пбщ\",\"0\"],[\"дЯШ\",\"1\"]," +
      "[\"UGG\",\"5\"],[\"ЩЛщ\",\"7\"],[\"рДю\",\"1\"],[\"ждЮ\",\"7\"]," +
      "[\"яЧН\",\"2\"],[\"ХЩК\",\"4\"],[\"Улд\",\"4\"],[\"щэЮ\",\"4\"]," +
      "[\"цЯМ\",\"9\"],[\"cgT\",\"8\"],[\"WwK\",\"1\"],[\"ЖРГ\",\"8\"]," + "[\"QXR\",\"5\"]]}";

  public static final String CSV_SORT1 = "{" + "\"columns\":[" +
      "{\"name\":\"CSTR\",\"java_type\":\"java.lang.String\"}," +
      "{\"name\":\"CNUM\",\"java_type\":\"java.lang.String\"}]," +
      "\"data\":[[\"BEC\",\"6\"],[\"DOn\",\"1\"],[\"DSr\",\"3\"]," +
      "[\"Esp\",\"4\"],[\"ExL\",\"5\"],[\"Fkp\",\"1\"],[\"Glu\",\"4\"]," +
      "[\"JKn\",\"3\"],[\"KZq\",\"4\"],[\"LbP\",\"9\"],[\"PIu\",\"2\"]," +
      "[\"PTM\",\"2\"],[\"QRH\",\"0\"],[\"QXR\",\"5\"],[\"QhO\",\"2\"]," +
      "[\"RFV\",\"8\"],[\"UGG\",\"5\"],[\"WwK\",\"1\"],[\"XGh\",\"4\"]," +
      "[\"YNh\",\"5\"],[\"aeL\",\"8\"],[\"bnW\",\"5\"],[\"cgT\",\"8\"]," +
      "[\"cho\",\"7\"],[\"duS\",\"3\"],[\"eTo\",\"4\"],[\"fcA\",\"3\"]," +
      "[\"gbJ\",\"4\"],[\"hhg\",\"3\"],[\"iyO\",\"3\"],[\"jaL\",\"5\"]," +
      "[\"jgB\",\"9\"],[\"jqq\",\"5\"],[\"khU\",\"3\"],[\"nTx\",\"9\"]," +
      "[\"nuU\",\"9\"],[\"orZ\",\"2\"],[\"psx\",\"8\"],[\"pwE\",\"4\"]," +
      "[\"pyQ\",\"8\"],[\"rMn\",\"9\"],[\"ruT\",\"7\"],[\"tOD\",\"8\"]," +
      "[\"ucq\",\"4\"],[\"vYB\",\"9\"],[\"vyH\",\"6\"],[\"wiZ\",\"0\"]," +
      "[\"wnA\",\"2\"],[\"yDl\",\"6\"],[\"zfT\",\"2\"],[\"ВеГ\",\"8\"]," +
      "[\"ГБЧ\",\"2\"],[\"ГДц\",\"5\"],[\"ДЮЗ\",\"5\"],[\"ЕюР\",\"4\"]," +
      "[\"ЖРГ\",\"8\"],[\"ЖлЦ\",\"7\"],[\"ЗЛЛ\",\"7\"],[\"ЛОЖ\",\"4\"]," +
      "[\"ЛрЗ\",\"2\"],[\"Ншу\",\"6\"],[\"ПщЯ\",\"2\"],[\"РЕЩ\",\"4\"]," +
      "[\"СГж\",\"1\"],[\"УдЭ\",\"8\"],[\"Улд\",\"4\"],[\"УчЮ\",\"2\"]," +
      "[\"ФЦЭ\",\"7\"],[\"ФцР\",\"7\"],[\"ХЩК\",\"4\"],[\"ЦвР\",\"8\"]," +
      "[\"ЩЛщ\",\"7\"],[\"ЯБр\",\"3\"],[\"ЯГЮ\",\"6\"],[\"бсБ\",\"5\"]," +
      "[\"вжм\",\"4\"],[\"вжщ\",\"5\"],[\"гДд\",\"4\"],[\"гРЛ\",\"5\"]," +
      "[\"дЯШ\",\"1\"],[\"ждЮ\",\"7\"],[\"зМг\",\"1\"],[\"кРВ\",\"7\"]," +
      "[\"мбм\",\"3\"],[\"пТФ\",\"2\"],[\"пбщ\",\"0\"],[\"рДю\",\"1\"]," +
      "[\"рЭБ\",\"4\"],[\"рзг\",\"0\"],[\"тРМ\",\"2\"],[\"уЛН\",\"7\"]," +
      "[\"хЧН\",\"6\"],[\"цБТ\",\"1\"],[\"цЯМ\",\"9\"],[\"щЕХ\",\"9\"]," +
      "[\"щмф\",\"3\"],[\"щэЮ\",\"4\"],[\"юяЧ\",\"4\"],[\"яЧН\",\"2\"]," + "[\"яэд\",\"1\"]]}";

  public static final String CSV_SORT2 = "{" + "\"columns\":[" +
      "{\"name\":\"CSTR\",\"java_type\":\"java.lang.String\"}," +
      "{\"name\":\"CNUM\",\"java_type\":\"java.lang.String\"}]," +
      "\"data\":[[\"LbP\",\"9\"],[\"jgB\",\"9\"],[\"nTx\",\"9\"]," +
      "[\"nuU\",\"9\"],[\"rMn\",\"9\"],[\"vYB\",\"9\"],[\"цЯМ\",\"9\"]," +
      "[\"щЕХ\",\"9\"],[\"RFV\",\"8\"],[\"aeL\",\"8\"],[\"cgT\",\"8\"]," +
      "[\"psx\",\"8\"],[\"pyQ\",\"8\"],[\"tOD\",\"8\"],[\"ВеГ\",\"8\"]," +
      "[\"ЖРГ\",\"8\"],[\"УдЭ\",\"8\"],[\"ЦвР\",\"8\"],[\"cho\",\"7\"]," +
      "[\"ruT\",\"7\"],[\"ЖлЦ\",\"7\"],[\"ЗЛЛ\",\"7\"],[\"ФЦЭ\",\"7\"]," +
      "[\"ФцР\",\"7\"],[\"ЩЛщ\",\"7\"],[\"ждЮ\",\"7\"],[\"кРВ\",\"7\"]," +
      "[\"уЛН\",\"7\"],[\"BEC\",\"6\"],[\"vyH\",\"6\"],[\"yDl\",\"6\"]," +
      "[\"Ншу\",\"6\"],[\"ЯГЮ\",\"6\"],[\"хЧН\",\"6\"],[\"ExL\",\"5\"]," +
      "[\"QXR\",\"5\"],[\"UGG\",\"5\"],[\"YNh\",\"5\"],[\"bnW\",\"5\"]," +
      "[\"jaL\",\"5\"],[\"jqq\",\"5\"],[\"ГДц\",\"5\"],[\"ДЮЗ\",\"5\"]," +
      "[\"бсБ\",\"5\"],[\"вжщ\",\"5\"],[\"гРЛ\",\"5\"],[\"Esp\",\"4\"]," +
      "[\"Glu\",\"4\"],[\"KZq\",\"4\"],[\"XGh\",\"4\"],[\"eTo\",\"4\"]," +
      "[\"gbJ\",\"4\"],[\"pwE\",\"4\"],[\"ucq\",\"4\"],[\"ЕюР\",\"4\"]," +
      "[\"ЛОЖ\",\"4\"],[\"РЕЩ\",\"4\"],[\"Улд\",\"4\"],[\"ХЩК\",\"4\"]," +
      "[\"вжм\",\"4\"],[\"гДд\",\"4\"],[\"рЭБ\",\"4\"],[\"щэЮ\",\"4\"]," +
      "[\"юяЧ\",\"4\"],[\"DSr\",\"3\"],[\"JKn\",\"3\"],[\"duS\",\"3\"]," +
      "[\"fcA\",\"3\"],[\"hhg\",\"3\"],[\"iyO\",\"3\"],[\"khU\",\"3\"]," +
      "[\"ЯБр\",\"3\"],[\"мбм\",\"3\"],[\"щмф\",\"3\"],[\"PIu\",\"2\"]," +
      "[\"PTM\",\"2\"],[\"QhO\",\"2\"],[\"orZ\",\"2\"],[\"wnA\",\"2\"]," +
      "[\"zfT\",\"2\"],[\"ГБЧ\",\"2\"],[\"ЛрЗ\",\"2\"],[\"ПщЯ\",\"2\"]," +
      "[\"УчЮ\",\"2\"],[\"пТФ\",\"2\"],[\"тРМ\",\"2\"],[\"яЧН\",\"2\"]," +
      "[\"DOn\",\"1\"],[\"Fkp\",\"1\"],[\"WwK\",\"1\"],[\"СГж\",\"1\"]," +
      "[\"дЯШ\",\"1\"],[\"зМг\",\"1\"],[\"рДю\",\"1\"],[\"цБТ\",\"1\"]," +
      "[\"яэд\",\"1\"],[\"QRH\",\"0\"],[\"wiZ\",\"0\"],[\"пбщ\",\"0\"]," + "[\"рзг\",\"0\"]]}";

  public static final String CSV_SORT3 =
      "{" + "\"columns\":[" + "{\"name\":\"CSTR\",\"java_type\":\"java.lang.String\"}]," +
          "\"data\":[[\"ABa\"],[\"aAb\"],[\"баБ\"],[\"баб\"]]}";

  public static final String CSV_FILTER1 = "{" +
      "\"columns\":[{\"name\":\"CSTR\",\"java_type\":\"java.lang.String\"}," +
      "{\"name\":\"CNUM\",\"java_type\":\"java.lang.String\"}]," +
      "\"data\":[[\"DSr\",\"3\"],[\"duS\",\"3\"],[\"fcA\",\"3\"]," +
      "[\"hhg\",\"3\"],[\"iyO\",\"3\"],[\"JKn\",\"3\"],[\"khU\",\"3\"]," +
      "[\"ЯБр\",\"3\"],[\"мбм\",\"3\"],[\"щмф\",\"3\"],[\"Esp\",\"4\"]," +
      "[\"eTo\",\"4\"],[\"gbJ\",\"4\"],[\"Glu\",\"4\"],[\"KZq\",\"4\"]," +
      "[\"pwE\",\"4\"],[\"ucq\",\"4\"],[\"XGh\",\"4\"],[\"ЕюР\",\"4\"]," +
      "[\"ЛОЖ\",\"4\"],[\"РЕЩ\",\"4\"],[\"Улд\",\"4\"],[\"ХЩК\",\"4\"]," +
      "[\"вжм\",\"4\"],[\"гДд\",\"4\"],[\"рЭБ\",\"4\"],[\"щэЮ\",\"4\"]," + "[\"юяЧ\",\"4\"]]}";

  public static final String CSV_FILTER_COMPLEX = "{" +
      "\"columns\":[" +
        "{\"name\":\"CSTR\",\"java_type\":\"java.lang.String\"}," +
        "{\"name\":\"CINT\",\"java_type\":\"java.lang.String\"}," +
        "{\"name\":\"CNUM\",\"java_type\":\"java.lang.Double\"}," +
        "{\"name\":\"CDATE\",\"java_type\":\"com.osbitools.util.Date\"}]," +
      "\"data\":[" +
        "[\"ewB\",\"4\",4.5204705669907845,\"2007-02-03\"]," +
        "[\"хдд\",\"7\",4.166499351125718,\"2007-05-18\"]," +
        "[\"ааА\",\"0\",5.363522439789376,\"2007-08-15\"]" +
  "]}";

  public static final String CSV_FILTER_COMPLEX_NO_HEADER = "{" +
      "\"columns\":[" +
        "{\"name\":\"COL1\",\"java_type\":\"java.lang.String\"}," +
        "{\"name\":\"COL2\",\"java_type\":\"java.lang.String\"}," +
        "{\"name\":\"COL3\",\"java_type\":\"java.lang.Double\"}," +
        "{\"name\":\"COL4\",\"java_type\":\"com.osbitools.util.Date\"}]," +
      "\"data\":[" +
        "[\"ewB\",\"4\",4.5204705669907845,\"2007-02-03\"]," +
        "[\"хдд\",\"7\",4.166499351125718,\"2007-05-18\"]," +
        "[\"ааА\",\"0\",5.363522439789376,\"2007-08-15\"]" +
    "]}";

  public static final String CSV_PARTIAL_NUM =
      "{\"columns\":[" + "{\"name\":\"YEAR\",\"java_type\":\"com.osbitools.util.Date\"}," +
          "{\"name\":\"ANNUAL_MEAN\",\"java_type\":\"java.lang.Float\"}," +
          "{\"name\":\"5YEAR_MEAN\",\"java_type\":\"java.lang.Float\"}" + "],\"data\":[" +
          "[\"1880-01-01\",-0.19,null],[\"1881-01-01\",-0.11,null]," +
          "[\"1882-01-01\",-0.09,-0.17],[\"1883-01-01\",-0.2,-0.19]," +
          "[\"1884-01-01\",-0.27,-0.23],[\"1885-01-01\",-0.31,-0.28]," +
          "[\"1886-01-01\",-0.3,-0.28],[\"1887-01-01\",-0.32,-0.25]," +
          "[\"1888-01-01\",-0.2,-0.26],[\"1889-01-01\",-0.1,-0.24]," +
          "[\"1890-01-01\",-0.36,-0.23],[\"1891-01-01\",-0.23,-0.25]," +
          "[\"1892-01-01\",-0.26,-0.29],[\"1893-01-01\",-0.29,-0.26]," +
          "[\"1894-01-01\",-0.3,-0.24],[\"1895-01-01\",-0.21,-0.21]," +
          "[\"1896-01-01\",-0.14,-0.21],[\"1897-01-01\",-0.1,-0.18]," +
          "[\"1898-01-01\",-0.28,-0.15],[\"1899-01-01\",-0.16,-0.15]," +
          "[\"1900-01-01\",-0.09,-0.19],[\"1901-01-01\",-0.14,-0.2]," +
          "[\"1902-01-01\",-0.28,-0.26],[\"1903-01-01\",-0.35,-0.3]," +
          "[\"1904-01-01\",-0.44,-0.31],[\"1905-01-01\",-0.27,-0.34]," +
          "[\"1906-01-01\",-0.22,-0.35],[\"1907-01-01\",-0.4,-0.36]," +
          "[\"1908-01-01\",-0.43,-0.39],[\"1909-01-01\",-0.47,-0.43]," +
          "[\"1910-01-01\",-0.42,-0.42],[\"1911-01-01\",-0.44,-0.4]," +
          "[\"1912-01-01\",-0.35,-0.34],[\"1913-01-01\",-0.34,-0.28]," +
          "[\"1914-01-01\",-0.15,-0.25],[\"1915-01-01\",-0.1,-0.26]," +
          "[\"1916-01-01\",-0.33,-0.25],[\"1917-01-01\",-0.39,-0.26]," +
          "[\"1918-01-01\",-0.25,-0.29],[\"1919-01-01\",-0.22,-0.26]," +
          "[\"1920-01-01\",-0.26,-0.24],[\"1921-01-01\",-0.2,-0.23]," +
          "[\"1922-01-01\",-0.26,-0.24],[\"1923-01-01\",-0.23,-0.23]," +
          "[\"1924-01-01\",-0.27,-0.21],[\"1925-01-01\",-0.19,-0.2]," +
          "[\"1926-01-01\",-0.09,-0.19],[\"1927-01-01\",-0.2,-0.21]," +
          "[\"1928-01-01\",-0.21,-0.2],[\"1929-01-01\",-0.36,-0.2]," +
          "[\"1930-01-01\",-0.13,-0.19],[\"1931-01-01\",-0.09,-0.2]," +
          "[\"1932-01-01\",-0.16,-0.16],[\"1933-01-01\",-0.28,-0.17]," +
          "[\"1934-01-01\",-0.13,-0.18],[\"1935-01-01\",-0.19,-0.15]," +
          "[\"1936-01-01\",-0.14,-0.1],[\"1937-01-01\",-0.02,-0.08]," +
          "[\"1938-01-01\",-0.02,-0.02],[\"1939-01-01\",-0.02,0.03]," +
          "[\"1940-01-01\",0.08,0.05],[\"1941-01-01\",0.12,0.08]," +
          "[\"1942-01-01\",0.1,0.14],[\"1943-01-01\",0.14,0.15]," +
          "[\"1944-01-01\",0.25,0.11],[\"1945-01-01\",0.12,0.09]," +
          "[\"1946-01-01\",-0.03,0.04],[\"1947-01-01\",-0.04,-0.03]," +
          "[\"1948-01-01\",-0.09,-0.09],[\"1949-01-01\",-0.09,-0.09]," +
          "[\"1950-01-01\",-0.18,-0.08],[\"1951-01-01\",-0.07,-0.05]," +
          "[\"1952-01-01\",0.01,-0.06],[\"1953-01-01\",0.08,-0.05]," +
          "[\"1954-01-01\",-0.12,-0.07],[\"1955-01-01\",-0.14,-0.07]," +
          "[\"1956-01-01\",-0.19,-0.07],[\"1957-01-01\",0.04,-0.04]," +
          "[\"1958-01-01\",0.06,-0.02],[\"1959-01-01\",0.03,0.03]," +
          "[\"1960-01-01\",-0.03,0.03],[\"1961-01-01\",0.05,0.03]," +
          "[\"1962-01-01\",0.02,-0.02],[\"1963-01-01\",0.06,-0.04]," +
          "[\"1964-01-01\",-0.21,-0.06],[\"1965-01-01\",-0.1,-0.07]," +
          "[\"1966-01-01\",-0.05,-0.09],[\"1967-01-01\",-0.03,-0.04]," +
          "[\"1968-01-01\",-0.07,-0.01],[\"1969-01-01\",0.06,-0.02]," +
          "[\"1970-01-01\",0.03,-0.01],[\"1971-01-01\",-0.09,0.03]," +
          "[\"1972-01-01\",0.01,0.0],[\"1973-01-01\",0.15,0.0]," +
          "[\"1974-01-01\",-0.08,-0.01],[\"1975-01-01\",-0.01,0.03]," +
          "[\"1976-01-01\",-0.11,0.01],[\"1977-01-01\",0.19,0.06]," +
          "[\"1978-01-01\",0.07,0.12],[\"1979-01-01\",0.17,0.21]," +
          "[\"1980-01-01\",0.28,0.2],[\"1981-01-01\",0.33,0.24]," +
          "[\"1982-01-01\",0.13,0.24],[\"1983-01-01\",0.31,0.21]," +
          "[\"1984-01-01\",0.16,0.18],[\"1985-01-01\",0.12,0.22]," +
          "[\"1986-01-01\",0.19,0.24],[\"1987-01-01\",0.34,0.27]," +
          "[\"1988-01-01\",0.4,0.33],[\"1989-01-01\",0.29,0.38]," +
          "[\"1990-01-01\",0.44,0.35],[\"1991-01-01\",0.42,0.32]," +
          "[\"1992-01-01\",0.22,0.33],[\"1993-01-01\",0.24,0.33]," +
          "[\"1994-01-01\",0.32,0.32],[\"1995-01-01\",0.46,0.37]," +
          "[\"1996-01-01\",0.34,0.44],[\"1997-01-01\",0.48,0.47]," +
          "[\"1998-01-01\",0.63,0.46],[\"1999-01-01\",0.42,0.5]," +
          "[\"2000-01-01\",0.42,0.53],[\"2001-01-01\",0.54,0.53]," +
          "[\"2002-01-01\",0.63,0.55],[\"2003-01-01\",0.62,0.6]," +
          "[\"2004-01-01\",0.54,0.62],[\"2005-01-01\",0.68,0.63]," +
          "[\"2006-01-01\",0.63,0.61],[\"2007-01-01\",0.66,0.63]," +
          "[\"2008-01-01\",0.54,0.64],[\"2009-01-01\",0.64,0.63]," +
          "[\"2010-01-01\",0.72,0.62],[\"2011-01-01\",0.6,0.65]," +
          "[\"2012-01-01\",0.63,0.67],[\"2013-01-01\",0.65,null]," +
          "[\"2014-01-01\",0.74,null]" + "]}";

  public static final String CSV_PARTIAL_NUM_COMPLEX =
      "{\"columns\":[" + "{\"name\":\"YEAR\",\"java_type\":\"com.osbitools.util.Date\"}," +
          "{\"name\":\"ANNUAL_MEAN\",\"java_type\":\"java.lang.Float\"}," +
          "{\"name\":\"5YEAR_MEAN\",\"java_type\":\"java.lang.Float\"}," +
          "{\"name\":\"INC\",\"java_type\":\"java.lang.Integer\"}" + "],\"data\":[" +
          "[\"1880-01-01\",-0.19,null,0]," + "[\"1881-01-01\",-0.11,null,1]," +
          "[\"1882-01-01\",-0.09,-0.17,2],[\"1883-01-01\",-0.2,-0.19,3]," +
          "[\"1884-01-01\",-0.27,-0.23,4],[\"1885-01-01\",-0.31,-0.28,5]," +
          "[\"1886-01-01\",-0.3,-0.28,6],[\"1887-01-01\",-0.32,-0.25,7]," +
          "[\"1888-01-01\",-0.2,-0.26,8],[\"1889-01-01\",-0.1,-0.24,9]," +
          "[\"1890-01-01\",-0.36,-0.23,10],[\"1891-01-01\",-0.23,-0.25,11]," +
          "[\"1892-01-01\",-0.26,-0.29,12],[\"1893-01-01\",-0.29,-0.26,13]," +
          "[\"1894-01-01\",-0.3,-0.24,14],[\"1895-01-01\",-0.21,-0.21,15]," +
          "[\"1896-01-01\",-0.14,-0.21,16],[\"1897-01-01\",-0.1,-0.18,17]," +
          "[\"1898-01-01\",-0.28,-0.15,18],[\"1899-01-01\",-0.16,-0.15,19]," +
          "[\"1900-01-01\",-0.09,-0.19,20],[\"1901-01-01\",-0.14,-0.2,21]," +
          "[\"1902-01-01\",-0.28,-0.26,22],[\"1903-01-01\",-0.35,-0.3,23]," +
          "[\"1904-01-01\",-0.44,-0.31,24],[\"1905-01-01\",-0.27,-0.34,25]," +
          "[\"1906-01-01\",-0.22,-0.35,26],[\"1907-01-01\",-0.4,-0.36,27]," +
          "[\"1908-01-01\",-0.43,-0.39,28],[\"1909-01-01\",-0.47,-0.43,29]," +
          "[\"1910-01-01\",-0.42,-0.42,30],[\"1911-01-01\",-0.44,-0.4,31]," +
          "[\"1912-01-01\",-0.35,-0.34,32],[\"1913-01-01\",-0.34,-0.28,33]," +
          "[\"1914-01-01\",-0.15,-0.25,34],[\"1915-01-01\",-0.1,-0.26,35]," +
          "[\"1916-01-01\",-0.33,-0.25,36],[\"1917-01-01\",-0.39,-0.26,37]," +
          "[\"1918-01-01\",-0.25,-0.29,38],[\"1919-01-01\",-0.22,-0.26,39]," +
          "[\"1920-01-01\",-0.26,-0.24,40],[\"1921-01-01\",-0.2,-0.23,41]," +
          "[\"1922-01-01\",-0.26,-0.24,42],[\"1923-01-01\",-0.23,-0.23,43]," +
          "[\"1924-01-01\",-0.27,-0.21,44],[\"1925-01-01\",-0.19,-0.2,45]," +
          "[\"1926-01-01\",-0.09,-0.19,46],[\"1927-01-01\",-0.2,-0.21,47]," +
          "[\"1928-01-01\",-0.21,-0.2,48],[\"1929-01-01\",-0.36,-0.2,49]," +
          "[\"1930-01-01\",-0.13,-0.19,50],[\"1931-01-01\",-0.09,-0.2,51]," +
          "[\"1932-01-01\",-0.16,-0.16,52],[\"1933-01-01\",-0.28,-0.17,53]," +
          "[\"1934-01-01\",-0.13,-0.18,54],[\"1935-01-01\",-0.19,-0.15,55]," +
          "[\"1936-01-01\",-0.14,-0.1,56],[\"1937-01-01\",-0.02,-0.08,57]," +
          "[\"1938-01-01\",-0.02,-0.02,58],[\"1939-01-01\",-0.02,0.03,59]," +
          "[\"1940-01-01\",0.08,0.05,60],[\"1941-01-01\",0.12,0.08,61]," +
          "[\"1942-01-01\",0.1,0.14,62],[\"1943-01-01\",0.14,0.15,63]," +
          "[\"1944-01-01\",0.25,0.11,64],[\"1945-01-01\",0.12,0.09,65]," +
          "[\"1946-01-01\",-0.03,0.04,66],[\"1947-01-01\",-0.04,-0.03,67]," +
          "[\"1948-01-01\",-0.09,-0.09,68],[\"1949-01-01\",-0.09,-0.09,69]," +
          "[\"1950-01-01\",-0.18,-0.08,70],[\"1951-01-01\",-0.07,-0.05,71]," +
          "[\"1952-01-01\",0.01,-0.06,72],[\"1953-01-01\",0.08,-0.05,73]," +
          "[\"1954-01-01\",-0.12,-0.07,74],[\"1955-01-01\",-0.14,-0.07,75]," +
          "[\"1956-01-01\",-0.19,-0.07,76],[\"1957-01-01\",0.04,-0.04,77]," +
          "[\"1958-01-01\",0.06,-0.02,78],[\"1959-01-01\",0.03,0.03,79]," +
          "[\"1960-01-01\",-0.03,0.03,80],[\"1961-01-01\",0.05,0.03,81]," +
          "[\"1962-01-01\",0.02,-0.02,82],[\"1963-01-01\",0.06,-0.04,83]," +
          "[\"1964-01-01\",-0.21,-0.06,84],[\"1965-01-01\",-0.1,-0.07,85]," +
          "[\"1966-01-01\",-0.05,-0.09,86],[\"1967-01-01\",-0.03,-0.04,87]," +
          "[\"1968-01-01\",-0.07,-0.01,88],[\"1969-01-01\",0.06,-0.02,89]," +
          "[\"1970-01-01\",0.03,-0.01,90],[\"1971-01-01\",-0.09,0.03,91]," +
          "[\"1972-01-01\",0.01,0.0,92],[\"1973-01-01\",0.15,0.0,93]," +
          "[\"1974-01-01\",-0.08,-0.01,94],[\"1975-01-01\",-0.01,0.03,95]," +
          "[\"1976-01-01\",-0.11,0.01,96],[\"1977-01-01\",0.19,0.06,97]," +
          "[\"1978-01-01\",0.07,0.12,98],[\"1979-01-01\",0.17,0.21,99]," +
          "[\"1980-01-01\",0.28,0.2,100],[\"1981-01-01\",0.33,0.24,101]," +
          "[\"1982-01-01\",0.13,0.24,102],[\"1983-01-01\",0.31,0.21,103]," +
          "[\"1984-01-01\",0.16,0.18,104],[\"1985-01-01\",0.12,0.22,105]," +
          "[\"1986-01-01\",0.19,0.24,106],[\"1987-01-01\",0.34,0.27,107]," +
          "[\"1988-01-01\",0.4,0.33,108],[\"1989-01-01\",0.29,0.38,109]," +
          "[\"1990-01-01\",0.44,0.35,110],[\"1991-01-01\",0.42,0.32,111]," +
          "[\"1992-01-01\",0.22,0.33,112],[\"1993-01-01\",0.24,0.33,113]," +
          "[\"1994-01-01\",0.32,0.32,114],[\"1995-01-01\",0.46,0.37,115]," +
          "[\"1996-01-01\",0.34,0.44,116],[\"1997-01-01\",0.48,0.47,117]," +
          "[\"1998-01-01\",0.63,0.46,118],[\"1999-01-01\",0.42,0.5,119]," +
          "[\"2000-01-01\",0.42,0.53,120],[\"2001-01-01\",0.54,0.53,121]," +
          "[\"2002-01-01\",0.63,0.55,122],[\"2003-01-01\",0.62,0.6,123]," +
          "[\"2004-01-01\",0.54,0.62,124],[\"2005-01-01\",0.68,0.63,125]," +
          "[\"2006-01-01\",0.63,0.61,126],[\"2007-01-01\",0.66,0.63,127]," +
          "[\"2008-01-01\",0.54,0.64,128],[\"2009-01-01\",0.64,0.63,129]," +
          "[\"2010-01-01\",0.72,0.62,130],[\"2011-01-01\",0.6,0.65,131]," +
          "[\"2012-01-01\",0.63,0.67,132],[\"2013-01-01\",0.65,null,133]," +
          "[\"2014-01-01\",0.74,null,134]" + "]}";

  public static final String SQL_FILTER_COMPLEX = "{" +
      "\"columns\":[" +
        "{\"name\":\"CSTR\",\"java_type\":\"java.lang.String\"}," +
        "{\"name\":\"CINT\",\"java_type\":\"java.lang.Integer\"}," +
        "{\"name\":\"CNUM\",\"java_type\":\"java.lang.Double\"}," +
        "{\"name\":\"CDATE\",\"java_type\":\"java.util.Date\"}]," +
      "\"data\":[" +
        "[\"BAB\",4,5.165882140661617,\"2010-01-07\"]," +
        "[\"BBa\",4,4.240214641484432,\"2010-03-11\"]" +
      "]" +
    "}";

  public static final String SQL_SELECT = "{" +
      "\"columns\":[" +
        "{\"name\":\"CSTR\",\"java_type\":\"java.lang.String\"}," +
        "{\"name\":\"CINT\",\"java_type\":\"java.lang.Integer\"}," +
        "{\"name\":\"CNUM\",\"java_type\":\"java.lang.Double\"}," +
        "{\"name\":\"CDATE\",\"java_type\":\"java.util.Date\"}]," +
      "\"data\":[" +
        "[\"БбБ\",4,2.955086552138356,\"2001-05-03\"]," +
        "[\"BBB\",2,3.2332353284050654,\"2008-02-23\"]," +
        "[\"ааа\",8,7.310115639942376,\"2008-01-19\"]," +
        "[\"AAb\",5,1.800337233825724,\"2000-10-25\"]," +
        "[\"Абб\",2,7.762678666517692,\"2007-08-20\"]," +
        "[\"bab\",7,6.603907566891581,\"2004-05-10\"]," +
        "[\"Bba\",9,4.131337008752595,\"2007-07-22\"]," +
        "[\"BBa\",3,6.363432849109767,\"2008-08-24\"]," +
        "[\"Ааб\",5,0.5613011579408855,\"2009-12-17\"]," +
        "[\"Ббб\",5,3.2349031533386907,\"2005-02-22\"]," +
        "[\"Baa\",4,3.6063533556379546,\"2011-07-01\"]," +
        "[\"Bbb\",7,6.178684489699045,\"2011-01-03\"]," +
        "[\"BaB\",2,9.661964994457277,\"2000-04-10\"]," +
        "[\"AAA\",4,1.5496807189474338,\"2008-05-06\"]," +
        "[\"Bba\",0,8.116801410155947,\"2007-10-18\"]," +
        "[\"baa\",0,8.526973987503299,\"2008-08-18\"]," +
        "[\"АбА\",2,9.08979391361228,\"2001-05-22\"]," +
        "[\"bAA\",4,9.500128543247566,\"2008-01-04\"]," +
        "[\"baB\",6,7.119973700700886,\"2009-12-13\"]," +
        "[\"BaA\",2,8.029349533986858,\"2006-05-01\"]," +
        "[\"БаА\",1,4.67624994735985,\"2005-02-17\"]," +
        "[\"BBA\",6,9.49667903999852,\"2007-06-03\"]," +
        "[\"аАА\",3,1.8543233750941412,\"2007-12-12\"]," +
        "[\"бББ\",3,2.0654223581606,\"2008-07-03\"]," +
        "[\"aAa\",1,1.127919456855021,\"2005-02-09\"]," +
        "[\"abA\",1,8.064986416553003,\"2011-11-02\"]," +
        "[\"аББ\",0,8.52153202699897,\"2007-07-01\"]," +
        "[\"Abb\",2,8.418324007586225,\"2007-01-20\"]," +
        "[\"Ббб\",0,5.071862284829727,\"2007-11-25\"]," +
        "[\"Bbb\",3,5.229165495026457,\"2010-06-12\"]," +
        "[\"ААб\",2,4.945141049700554,\"2000-05-25\"]," +
        "[\"аАА\",0,0.1462287772470361,\"2008-04-20\"]," +
        "[\"BbA\",5,9.077523504011257,\"2008-05-12\"]," +
        "[\"ббб\",7,8.62159504803369,\"2010-05-15\"]," +
        "[\"аБа\",3,5.705742717455145,\"2003-03-08\"]," +
        "[\"БАБ\",2,2.6804361453845935,\"2008-02-03\"]," +
        "[\"АБА\",2,1.655207836089173,\"2002-06-05\"]," +
        "[\"ABa\",2,7.3192819982081225,\"2008-02-11\"]," +
        "[\"BAA\",9,0.752737625425054,\"2000-10-10\"]," +
        "[\"бба\",9,8.150017165108979,\"2005-01-13\"]," +
        "[\"БаБ\",0,8.23111547463195,\"2001-01-19\"]," +
        "[\"ABa\",5,0.4067890892069337,\"2010-05-03\"]," +
        "[\"ааА\",8,2.492651112124703,\"2005-04-19\"]," +
        "[\"бБб\",0,1.9330230981491137,\"2004-09-08\"]," +
        "[\"BBa\",6,8.098941621633367,\"2008-01-13\"]," +
        "[\"аББ\",1,5.265723718522052,\"2004-12-14\"]," +
        "[\"Abb\",8,6.354013954289926,\"2005-03-24\"]," +
        "[\"БАб\",2,6.434256067225719,\"2011-01-06\"]," +
        "[\"ааа\",1,2.348038918124752,\"2003-01-11\"]," +
        "[\"ббБ\",2,0.5907908378234694,\"2007-02-17\"]," +
        "[\"ABb\",2,9.82880562053704,\"2003-08-19\"]," +
        "[\"abA\",5,7.0896026956224105,\"2010-10-14\"]," +
        "[\"aba\",4,7.768139863126658,\"2008-06-21\"]," +
        "[\"аАб\",2,9.132408058189716,\"2007-02-03\"]," +
        "[\"Ааб\",0,4.9904591152361375,\"2009-04-19\"]," +
        "[\"aaA\",8,5.596930659449094,\"2004-12-09\"]," +
        "[\"АБа\",4,1.7306452559102548,\"2006-11-10\"]," +
        "[\"BAB\",4,5.165882140661617,\"2010-01-07\"]," +
        "[\"аАа\",5,9.488429573267059,\"2003-10-03\"]," +
        "[\"BBB\",6,5.373545842917705,\"2000-11-04\"]," +
        "[\"aab\",5,3.0464715835168787,\"2004-01-02\"]," +
        "[\"ббБ\",5,1.6871490327877292,\"2009-02-19\"]," +
        "[\"ABb\",0,1.0193234019082942,\"2002-04-23\"]," +
        "[\"BBa\",4,4.240214641484432,\"2010-03-11\"]," +
        "[\"абА\",8,3.8004639845524424,\"2007-01-02\"]," +
        "[\"бБа\",5,2.3350761845627312,\"2005-11-14\"]," +
        "[\"бАа\",5,0.27459281273628067,\"2004-03-12\"]," +
        "[\"бБб\",7,9.33174701701589,\"2004-12-13\"]," +
        "[\"Aaa\",0,7.162369946379357,\"2007-01-01\"]," +
        "[\"bbA\",3,3.0403276652994315,\"2003-03-04\"]," +
        "[\"ABA\",3,7.364789708564769,\"2007-10-10\"]," +
        "[\"bBa\",6,9.234142316635994,\"2002-09-19\"]," +
        "[\"АаА\",9,6.174375598351075,\"2001-05-03\"]," +
        "[\"АаА\",5,8.400790218789226,\"2009-12-16\"]," +
        "[\"аАа\",3,6.720384215336496,\"2004-06-12\"]," +
        "[\"Баб\",1,8.348297929759346,\"2005-02-19\"]," +
        "[\"аБА\",2,8.515205420653157,\"2010-02-07\"]," +
        "[\"БбА\",9,7.7835642055587275,\"2003-07-22\"]," +
        "[\"ааБ\",1,5.46914540027557,\"2003-09-07\"]," +
        "[\"бАа\",4,8.480280261770485,\"2011-10-18\"]," +
        "[\"Bba\",8,2.240783059070842,\"2009-12-15\"]," +
        "[\"bAA\",7,6.153515781438093,\"2003-06-07\"]," +
        "[\"bAA\",2,0.29008305871346174,\"2002-08-21\"]," +
        "[\"бАА\",4,2.6581580988548192,\"2009-10-06\"]," +
        "[\"aaA\",4,7.501456449432819,\"2005-06-11\"]," +
        "[\"bAA\",0,4.62839053595843,\"2005-01-23\"]," +
        "[\"AaA\",1,7.7439542203731175,\"2008-01-19\"]," +
        "[\"BAb\",5,6.175399034533479,\"2002-06-22\"]," +
        "[\"bbA\",4,9.235783600946657,\"2011-12-06\"]," +
        "[\"БАа\",8,5.760492241362804,\"2003-07-06\"]," +
        "[\"AaA\",6,3.0803307243266884,\"2005-09-16\"]," +
        "[\"АбБ\",8,9.860827244268556,\"2003-11-16\"]," +
        "[\"БАб\",0,5.840882093163984,\"2006-07-15\"]," +
        "[\"BAB\",7,8.54492142231862,\"2011-12-24\"]," +
        "[\"АаА\",2,2.521228682190743,\"2000-05-20\"]," +
        "[\"ABb\",6,0.5751450668303459,\"2011-10-16\"]," +
        "[\"ABb\",0,8.819340721953457,\"2008-11-04\"]," +
        "[\"АББ\",8,8.154377844150684,\"2002-01-21\"]," +
        "[\"abB\",6,4.021302735285386,\"2010-07-05\"]," +
        "[\"BBA\",1,3.934016678793025,\"2011-08-24\"]" +
    "]}";

  public static final String SQL_SELECT_COND = "{" +
      "\"columns\":[" +
        "{\"name\":\"CSTR\",\"java_type\":\"java.lang.String\"}," +
        "{\"name\":\"CINT\",\"java_type\":\"java.lang.Integer\"}," +
        "{\"name\":\"CNUM\",\"java_type\":\"java.lang.Double\"}," +
        "{\"name\":\"CDATE\",\"java_type\":\"java.util.Date\"}]," +
      "\"data\":[" +
        "[\"BBa\",3,6.363432849109767,\"2008-08-24\"]," +
        "[\"аАА\",3,1.8543233750941412,\"2007-12-12\"]," +
        "[\"бББ\",3,2.0654223581606,\"2008-07-03\"]," +
        "[\"Bbb\",3,5.229165495026457,\"2010-06-12\"]," +
        "[\"аБа\",3,5.705742717455145,\"2003-03-08\"]," +
        "[\"bbA\",3,3.0403276652994315,\"2003-03-04\"]," +
        "[\"ABA\",3,7.364789708564769,\"2007-10-10\"]," +
        "[\"аАа\",3,6.720384215336496,\"2004-06-12\"]," +
        "[\"БбБ\",4,2.955086552138356,\"2001-05-03\"]," +
        "[\"Baa\",4,3.6063533556379546,\"2011-07-01\"]," +
        "[\"AAA\",4,1.5496807189474338,\"2008-05-06\"]," +
        "[\"bAA\",4,9.500128543247566,\"2008-01-04\"]," +
        "[\"aba\",4,7.768139863126658,\"2008-06-21\"]," +
        "[\"АБа\",4,1.7306452559102548,\"2006-11-10\"]," +
        "[\"BAB\",4,5.165882140661617,\"2010-01-07\"]," +
        "[\"BBa\",4,4.240214641484432,\"2010-03-11\"]," +
        "[\"бАа\",4,8.480280261770485,\"2011-10-18\"]," +
        "[\"бАА\",4,2.6581580988548192,\"2009-10-06\"]," +
        "[\"aaA\",4,7.501456449432819,\"2005-06-11\"]," +
        "[\"bbA\",4,9.235783600946657,\"2011-12-06\"]," +
        "[\"AAb\",5,1.800337233825724,\"2000-10-25\"]," +
        "[\"Ааб\",5,0.5613011579408855,\"2009-12-17\"]," +
        "[\"Ббб\",5,3.2349031533386907,\"2005-02-22\"]," +
        "[\"BbA\",5,9.077523504011257,\"2008-05-12\"]," +
        "[\"ABa\",5,0.4067890892069337,\"2010-05-03\"]," +
        "[\"abA\",5,7.0896026956224105,\"2010-10-14\"]," +
        "[\"аАа\",5,9.488429573267059,\"2003-10-03\"]," +
        "[\"aab\",5,3.0464715835168787,\"2004-01-02\"]," +
        "[\"ббБ\",5,1.6871490327877292,\"2009-02-19\"]," +
        "[\"бБа\",5,2.3350761845627312,\"2005-11-14\"]," +
        "[\"бАа\",5,0.27459281273628067,\"2004-03-12\"]," +
        "[\"АаА\",5,8.400790218789226,\"2009-12-16\"]," +
        "[\"BAb\",5,6.175399034533479,\"2002-06-22\"]" +
    "]}";

  // @formatter:on

  static final ObjectMapper mapper = new ObjectMapper();

  private static LsFilesCheck _lcheck;

  //Pointer on LangLabels File check daemon
  @Autowired
  @Qualifier("lcheck")
  public void setLsFilesCheckRef(LsFilesCheck lcheck) throws Exception {
    if (_lcheck != null)
      return;

    _lcheck = lcheck;

    // Wait to initialize 
    long dts = System.currentTimeMillis();
    while (!lcheck.isInit() &&
        (System.currentTimeMillis() - dts) < TestConstants.WAIT_TIME)
      Thread.sleep(TestConstants.RESULT_CHECK_TIME);

    assertTrue("LangLabels daemon didn't initialized after " +
        TestConstants.WAIT_TIME + " msec of waiting", lcheck.isInit());

    // Check for empty labels
    String[] rlist = lcheck.getAllResources();

    assertNotNull(rlist);
    assertEquals(0, rlist.length);

    loadDefLsFile();
  }

  public DsDaemonTest() {
    super(DBMAP_ALIAS, DataSetDescr.class,
        new String[] { "ds_empty.xml", "ds.xml" }, _fname, _ds_cfg);
  }

  @BeforeClass
  public static void setUpBeforeClass() throws Exception {
    init();

    // Create subdirectory test/csv
    File tcsv = new File(
        CoreSharedTestConstants.WORK_TEST_PROJ + File.separator + "csv");
    if (!tcsv.exists() && !tcsv.mkdir())
      fail("Unable create " + tcsv.getAbsolutePath() + " directory.");

    // Copy csv files
    String[] flist = JarUtils.readJarDirList(TestDsConstants.DS_MAPS_PACKAGE +
        "/" + CoreSharedTestConstants.TEST_PRJ_NAME + "/csv");
    for (String fname : flist)
      JarTestResourceUtils.copyDemoFileToFile(
          CoreSharedTestConstants.TEST_PRJ_NAME + "/csv/" + fname,
          CoreSharedTestConstants.WORK_TEST_PROJ + File.separator + "csv" +
              File.separator + fname,
          _ds_cfg);

    // Create subdirectory bad
    td = new File(CoreSharedTestConstants.WORK_BAD_PROJ);
    if (!td.exists() && !td.mkdir())
      fail("Unable create " + CoreSharedTestConstants.WORK_BAD_PROJ +
          " directory.");

    mapper.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);

    // Read SqlDate as string because in liferay and microservices different default
    // locale and different result returned by java.util.Date.getTime()
    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
  }

  public void loadDefLsFile() throws Exception {
    // Copy demo ll_set to test project
    JarTestResourceUtils.copyDemoFileToFile(
        LsConstants.LANG_SET_FILE + "_combo",
        CoreSharedTestConstants.LS_SET_TEST_FILE_PATH,
        LangLabelsDaemonTest.LS_CFG);

    LsResource lsr = null;

    long dts = System.currentTimeMillis();
    while (true &&
        (System.currentTimeMillis() - dts) < TestConstants.WAIT_TIME) {

      lsr = _lcheck.getResource(CoreSharedTestConstants.TEST_LS_FILE_KEY);
      if (lsr != null)
        break;

      Thread.sleep(TestConstants.RESULT_CHECK_TIME);
    }

    assertNotNull(
        "'" + CoreSharedTestConstants.TEST_LS_FILE_KEY + "' is not loaded " +
            "after " + TestConstants.WAIT_TIME + " msec of waiting.",
        lsr);

    BindingTest.checkLangLabelsSetCombined(lsr.getResource());
  }

  @AfterClass
  public static void setUpAfterClass() throws InterruptedException {
    // Remove remaining ll_set
    if (!(new File(CoreSharedTestConstants.LS_SET_TEST_FILE_PATH)).delete())
      fail("Unable delete " + CoreSharedTestConstants.LS_SET_TEST_FILE_PATH);
  }

  @Before
  public void initTest() {
    warn = new ArrayList<String>();
    trace = new TraceRecorder(System.currentTimeMillis(), false);

    // Initial check
    AbstractResourceCheck<DataSetDescr, DsDescrResource> _dcheck =
        getCheckRef();
    assertNotNull(_dcheck);
    assertNull(_dcheck.getResource(DBMAP_ALIAS));

    // Reset trace and warn
    trace.setEnabled(false);
    warn.clear();
  }

  @Test
  public void testVersions() {
    AbstractResourceCheck<DataSetDescr, DsDescrResource> _dcheck =
        getCheckRef();

    try {
      // Test same version
      _dcheck.checkVersionsEx(new int[] { 2, 0 }, new int[] { 2, 0 });
      // Test lower major version
      _dcheck.checkVersionsEx(new int[] { 1, 0 }, new int[] { 2, 0 });
      // Test lower minor version
      _dcheck.checkVersionsEx(new int[] { 1, 8 }, new int[] { 1, 9 });
    } catch (WsSrvException e) {
      fail(e.toString());
    }

    // Test higher major version
    try {
      // Test same version
      _dcheck.checkVersionsEx(new int[] { 2, 0 }, new int[] { 1, 8 });
    } catch (WsSrvException e) {
      assertEquals(e.getErrorCode(), 101);
    }

    // Test higher minor version
    try {
      _dcheck.checkVersionsEx(new int[] { 1, 9 }, new int[] { 1, 8 });
    } catch (WsSrvException e) {
      assertEquals(e.getErrorCode(), 102);
    }
  }

  @Test
  public void testStaticTestLmapMinified() throws Exception {
    testStaticFile("static_test_lmap", false, STR_STATIC_TEST_LMAP_SINGLE);
    testFile("static_test_lmap", false, STR_STATIC_TEST_LMAP_SINGLE);
  }

  @Test
  public void testStaticTestLmapMinifiedGroup() throws Exception {
    // testFile("static_test_lmap_grp_single", false, STR_STATIC_TEST_LMAP_SINGLE);
    testFile("static_test_lmap_grp_multi", false, STR_STATIC_TEST_LMAP_MULTI);
  }

  @Test
  public void testStaticTestLmapMinifiedGroupCsv() throws Exception {
    // Map includes csv file
    testFile("group_mixed", false, STR_STATIC_TEST_GROUP_MIXED);
  }

  @Test
  public void testStaticTestLmapMinifiedGrpComplex1() throws Exception {
    testFile("static_test_lmap_grp_complex1", true,
        STR_STATIC_TEST_LMAP_GRP_COMPLEX_1);
  }

  @Test
  public void testStaticTestLmapMinifiedGrpComplex2() throws Exception {
    testFile("static_test_lmap_grp_complex2", true,
        STR_STATIC_TEST_LMAP_GRP_COMPLEX_2);
  }

  @Test
  public void testStaticTestLmapMinifiedGrpComplex3() throws Exception {
    testFile("static_test_lmap_grp_complex3", true,
        STR_STATIC_TEST_LMAP_GRP_COMPLEX_3);
  }

  @Test
  public void testStaticAutoInc() throws Exception {
    testFile("static_test_lmap_auto_inc", false, STR_STATIC_TEST_LMAP_AUTO_INC);
  }

  @Test
  public void testStaticCalc() throws Exception {
    testFile("static_test_lmap_calc", false, STR_STATIC_TEST_LMAP_CALC);
    testFile("static_test_calc_date1", false, STR_STATIC_TEST_CALC_DATE1);
    testFile("static_test_calc_date2", false, STR_STATIC_TEST_CALC_DATE2);
  }

  @Test
  public void testStaticTestLmapNonMinified() throws Exception {
    testStaticFile("static_test_lmap", false,
        STR_STATIC_TEST_LMAP_NON_MINIFIED_NO_TRACE, false);

    trace.setEnabled(true);
    warn.add("Hi \"there\"!!!");
    warn.add("Hello 'here'???");

    testFile("static_test_lmap", false, STR_STATIC_TEST_LMAP_NON_MINIFIED,
        false);

    trace.getEventsList().clear();

    testFile("static_test_lmap_grp_single", false,
        STR_STATIC_TEST_LMAP_GRP_NON_MINIFIED, false);

    warn = null;
    trace.setEnabled(false);
    testFile("static_test_lmap_grp_multi", false,
        STR_STATIC_TEST_LMAP_EX_NON_MINIFIED, false);
  }

  @Test
  public void testStaticTestLmapNonMinifiedComplex() throws Exception {
    testFile("static_test_lmap_grp_complex3", true,
        STR_STATIC_TEST_LMAP_COMPLEX_NON_MINIFIED, false);
  }

  @Test
  public void testStaticCalcBad1() throws Exception {
    testStaticCalcBad("static_test_calc_bad1", 115, 3);
  }

  @Test
  public void testStaticCalcBad2() throws Exception {
    testStaticCalcBad("static_test_calc_bad2", 107, 2);
  }

  @Test
  public void testStaticCalcBad3() throws Exception {
    testStaticCalcBad("static_test_calc_bad3", 114, 2);
  }

  public void testStaticCalcBad(String falias, int errCode, int errMsgCnt)
      throws Exception {
    try {
      testBad(falias, false, "");
      fail("Exception expected");
    } catch (WsSrvException e) {
      assertEquals(errCode, e.getErrorCode());
      String[] dmsg = e.getDetailMsgs();
      assertNotNull(dmsg);
      assertEquals(errMsgCnt, dmsg.length);
    }
  }

  public void testStaticFile(String falias, boolean complex, String res)
      throws IOException, InterruptedException, WsSrvException {
    testStaticFile(falias, complex, res, true);
  }

  public void testStaticFile(String falias, boolean complex, String res,
      boolean minified)
      throws IOException, InterruptedException, WsSrvException {
    DsDescrResource dsr = loadTestFile(falias);

    StaticDataSetProc sdsp = new StaticDataSetProc(
        new DsExtResource(dsr.getResource()), null, _rlog);
    sdsp.setDsDescrResource(dsr);
    StaticDataSetProducer sdpr = new StaticDataSetProducer(sdsp, _lcheck, _cfg);

    DataSet ds =
        sdpr.read(CoreSharedTestConstants.TEST_PRJ_PREFIX + falias + ".xml",
            CommonConstants.DEFAULT_LANG, trace, warn);

    if (minified)
      mapper.disable(SerializationFeature.INDENT_OUTPUT);
    else
      mapper.enable(SerializationFeature.INDENT_OUTPUT);

    assertEquals(res, mapper.writeValueAsString(ds));
  }

  @Test
  public void testStaticTestStr1() throws Exception {
    testFile("static_test_str1", true, STR_STATIC_TEST_STR1);
  }

  @Test
  public void testStaticTestStr2() throws Exception {
    String falias = "static_test_str2";
    DsDescrResource dsr = loadTestFile(falias);

    DataSetProcessor jdsp = new DataSetProcessor(dsr, null, _rlog);

    AbstractDataSetProc dsp = jdsp.getDataSetProc();
    assertTrue(falias + " is complex", dsp.isComplex());

    DataSet ds =
        jdsp.read(CoreSharedTestConstants.TEST_PRJ_PREFIX + falias + ".xml",
            null, CommonConstants.DEFAULT_LANG, trace, warn, _lcheck, _cfg);
    assertEquals(falias, STR_STATIC_TEST_STR_SORTED,
        mapper.writeValueAsString(ds));
  }

  @Test
  public void testStaticTestStr3() throws Exception {
    String falias = "static_test_str3";
    DsDescrResource dsr = loadTestFile(falias);

    DataSetProcessor jdsp = new DataSetProcessor(dsr, null, _rlog);

    AbstractDataSetProc dsp = jdsp.getDataSetProc();
    assertTrue(falias + " is complex", dsp.isComplex());

    DataSet ds =
        jdsp.read(CoreSharedTestConstants.TEST_PRJ_PREFIX + falias + ".xml",
            null, CommonConstants.DEFAULT_LANG, trace, warn, _lcheck, _cfg);
    assertEquals(STR_STATIC_TEST_STR_SORTED, mapper.writeValueAsString(ds));
  }

  @Test
  public void testCsvStr1() throws Exception {
    testFile("csv_str1", false, CSV_STR1);
  }

  @Test
  public void testCsvPartialNum() throws Exception {
    testFile("csv_partial_num", false, CSV_PARTIAL_NUM);
  }

  @Test
  public void testCsvPartialNumComplex() throws Exception {
    testFile("csv_partial_num_complex", false, CSV_PARTIAL_NUM_COMPLEX);
  }

  @Test
  public void testCsvSort1() throws Exception {
    testFile("csv_sort1", true, CSV_SORT1);
  }

  @Test
  public void testCsvSort2() throws Exception {
    testFile("csv_sort2", true, CSV_SORT2);
  }

  @Test
  public void testCsvSort3() throws Exception {
    testFile("csv_sort3", true, CSV_SORT3);
  }

  @Test
  public void testCsvFilter1() throws Exception {
    testFile("csv_filter1", true, CSV_FILTER1);
  }

  @Test
  public void testCsvFilterComplex() throws Exception {
    testFile("csv_filter_complex", true, CSV_FILTER_COMPLEX);
  }

  @Test
  public void testCsvFilterComplexNoHeader() throws Exception {
    testFile("csv_filter_complex_no_header", true,
        CSV_FILTER_COMPLEX_NO_HEADER);
  }

  @SuppressWarnings("deprecation")
  @Test
  public void testCsvFilterParams() throws Exception {
    HashMap<String, Object> params = new HashMap<String, Object>();
    params.put("date_from", new Date("01/01/2007"));
    params.put("date_to", new Date("12/31/2007"));
    params.put("num_from", new Double(4));
    params.put("num_to", new Double(6));

    testFile("csv_filter_params", true, CSV_FILTER_COMPLEX, params);
  }

  @Test
  public void testCsvFilterParamsBad() throws Exception {
    HashMap<String, Object> params = new HashMap<String, Object>();

    try {
      testFile("csv_filter_params", true, CSV_FILTER_COMPLEX, params);
      fail("Exception expected");
    } catch (WsSrvException e) {
      assertEquals(138, e.getErrorCode());
    }
  }

  @Test
  public void testCsvBad() throws Exception {
    testStaticCalcBad("csv_bad", 116, 2);
  }

  @Test
  @SuppressWarnings("deprecation")
  public void testSqlFilterComplex() throws Exception {
    HashMap<String, Object> params = new HashMap<String, Object>();
    params.put("date_from", new Date("03/08/2003"));
    params.put("date_to", new Date("03/31/2010"));
    params.put("num_from", new Double(4));
    params.put("num_to", new Double(6));
    params.put("f", new Integer(3));
    params.put("t", new Integer(5));

    HashMap<String, String[]> sparams = new HashMap<String, String[]>();
    testSqlFile("sql_filter_complex", true, SQL_FILTER_COMPLEX, params, _ds,
        sparams);
  }

  private void testFile(String falias, boolean complex, String res)
      throws Exception {
    testFile(falias, complex, res, null, true);
  }

  private void testFile(String falias, boolean complex, String res,
      boolean minified) throws Exception {
    testFile(falias, complex, res, null, minified);
  }

  private void testFile(String falias, boolean complex, String res,
      HashMap<String, Object> params) throws Exception {
    testFile(falias, complex, res, params, true);
  }

  private void testFile(String falias, boolean complex, String res,
      HashMap<String, Object> params, boolean minified) throws Exception {
    testFile(falias, CoreSharedTestConstants.TEST_PRJ_NAME, complex, res,
        params, minified);
  }

  private void testBad(String falias, boolean complex, String res)
      throws Exception {
    testBad(falias, complex, res, true);
  }

  private void testBad(String falias, boolean complex, String res,
      boolean minified) throws Exception {
    testFile(falias, CoreSharedTestConstants.BAD_PRJ_NAME, complex, res, null,
        minified);
  }

  private void testFile(String falias, String prefix, boolean complex,
      String res, HashMap<String, Object> params, boolean minified)
      throws Exception {

    DsDescrResource dsr = loadJarFile(prefix, falias + ".xml");

    DataSetProcessor jdsp = new DataSetProcessor(dsr, params, _rlog);

    AbstractDataSetProc dsp = jdsp.getDataSetProc();

    assertEquals("Complex check fail", complex, dsp.isComplex());

    DataSet ds = jdsp.read(prefix + "." + falias + ".xml", null,
        CommonConstants.DEFAULT_LANG, trace, warn, _lcheck, _cfg);

    if (minified)
      mapper.disable(SerializationFeature.INDENT_OUTPUT);
    else
      mapper.enable(SerializationFeature.INDENT_OUTPUT);

    String json = mapper.writeValueAsString(ds);

    if (trace.isEnabled())
      // Remove trace numbers
      json = json.replaceAll("\"duration\" : [\\d\\.]*", "\"duration\": ");

    assertEquals("Test failed for " + falias, res, json);
  }

  private void testSqlFile(String falias, boolean complex, String res,
      HashMap<String, Object> params, DataSource ds,
      Map<String, String[]> sparams) throws Exception {

    DsDescrResource dsr = loadTestFile(falias);

    DataSetProcessor jdsp = new DataSetProcessor(dsr, params, _rlog);

    SqlDataSetProc dsp = (SqlDataSetProc) jdsp.getDataSetProc();
    assertEquals(complex, dsp.isComplex());

    // Set connection
    dsp.init(ds);

    DataSet dst =
        jdsp.read(CoreSharedTestConstants.TEST_PRJ_PREFIX + falias + ".xml",
            sparams, CommonConstants.DEFAULT_LANG, trace, warn, _lcheck, _cfg);
    String json = mapper.writeValueAsString(dst);

    if (trace.isEnabled())
      // Remove trace numbers
      json = json.replaceAll("\"duration\": [\\d\\.]*", "\"duration\": ");

    assertEquals(falias + " conversion failed", res, json);
  }

  private DsDescrResource loadJarFile(String prefix, String falias)
      throws IOException, InterruptedException {
    // Copy partial static_test_lmap.xml

    JarTestResourceUtils.copyDemoFileToFile(prefix + "/" + falias,
        CoreSharedTestConstants.WORK_DS_PATH + prefix + File.separator + falias,
        _ds_cfg);

    // Wait file loaded
    DsDescrResource dsr = null;
    long dts = System.currentTimeMillis();
    while (true &&
        (System.currentTimeMillis() - dts) < TestConstants.WAIT_TIME2) {
      dsr = getCheckRef().getResource(prefix + "." + falias);

      if (dsr != null)
        break;

      Thread.sleep(TestConstants.RESULT_CHECK_TIME);
    }

    assertNotNull("'" + falias + "' is not loaded after " +
        TestConstants.WAIT_TIME2 + " msec of waiting.", dsr);

    return dsr;
  }

  private DsDescrResource loadTestFile(String falias)
      throws IOException, InterruptedException {
    return loadJarFile(CoreSharedTestConstants.TEST_PRJ_NAME, falias + ".xml");
  }

  @Override
  protected DsDescrResource checkPartialTestResourceLoaded() throws Exception {
    DsDescrResource dsr = super.checkPartialTestResourceLoaded();

    // Check for complex
    XmlDataSetProc dgp =
        new XmlDataSetProc(new DsExtResource(dsr.getResource()), null, _rlog);
    dgp.initComplex();
    assertFalse("Partial ds.xml is not complex", dgp.isComplex());

    return dsr;
  };

  @Override
  protected DsDescrResource checkFullTestResourceLoaded() throws Exception {
    DsDescrResource dsr = super.checkFullTestResourceLoaded();

    // Check for complex
    GroupDataSetProc dgp =
        new GroupDataSetProc(new DsExtResource(dsr.getResource()), null, _rlog);
    dgp.initComplex();
    assertTrue("Full ds.xml is complex", dgp.isComplex());

    return dsr;
  }

  @Test
  public void testSingleReload() throws Exception {
    testSingleResourceReload();
  }

  @Test
  public void multiTestReload() throws Exception {
    multiTestResourceReload(DsDaemonTest.class.getName());
  }

}
